import telebot
from telebot import types
import json
import datetime
import os
from apscheduler.schedulers.background import BackgroundScheduler
import pytz

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.environ.get("BOT_TOKEN")  # <-- –∏—Å–ø–æ–ª—å–∑—É–µ–º os.environ.get
if not BOT_TOKEN:
    raise Exception("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Environment Variables –≤ Render!")

ADMIN_EMAIL = os.environ.get("ADMIN_EMAIL", 
# –ü—Ä–æ–¥–∞–≤—Ü—ã
SELLERS = {
    "sssaaiidddd": "–°–∞–∏–¥",
    "Yagona771": "–ù–∏–ª—é—Ñ–∞—Ä",
    "Chayka2288": "–û–∫—Å–∞–Ω–∞"
}

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
CATEGORIES = [
    "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞", "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞", "–§–∏–Ω–∏—à–Ω–∞—è –æ—Ç–¥–µ–ª–∫–∞", "–ö—Ä–µ–ø–µ–∂", "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç",
    "–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞", "–ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã", "–ö–æ—à–∫–∏–Ω –¥–æ–º", "–ü–∞—Ä—Ñ—é–º–µ—Ä–∏—è",
    "–ë—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è", "–ö–æ—Å–º–µ—Ç–∏–∫–∞", "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö", "–ü—Ä–æ—á–µ–µ"
]

DATA_FILE = "orders.json"
TIMEZONE = pytz.timezone("Asia/Tashkent")

bot = telebot.TeleBot(BOT_TOKEN)

# === –•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• ===
def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {cat: [] for cat in CATEGORIES}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

data = load_data()
activity = {}

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
@bot.message_handler(commands=['start'])
def start(msg):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for cat in CATEGORIES:
        kb.add(types.KeyboardButton(cat))
    bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:", reply_markup=kb)

@bot.message_handler(func=lambda msg: msg.text in CATEGORIES)
def choose_category(msg):
    bot.send_message(msg.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{msg.text}':")
    bot.register_next_step_handler(msg, lambda m: add_item(m, msg.text))

def add_item(msg, category):
    username = msg.from_user.username or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    item = msg.text.strip()
    if not item:
        return bot.send_message(msg.chat.id, "–ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
    
    data[category].append(f"{item} ‚Äî –¥–æ–±–∞–≤–∏–ª {username}")
    save_data(data)

    # –£—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    if username not in activity:
        activity[username] = 0
    activity[username] += 1

    bot.send_message(msg.chat.id, f"‚úÖ –¢–æ–≤–∞—Ä '{item}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ '{category}'!")

# === –û–¢–ß–Å–¢ –ü–û –í–¢–û–†–ù–ò–ö–ê–ú ===
def weekly_report():
    now = datetime.datetime.now(TIMEZONE)
    if now.weekday() == 1 and now.hour == 21:  # –≤—Ç–æ—Ä–Ω–∏–∫ 21:00
        report = "üßæ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º:\n\n"
        for cat, items in data.items():
            if items:
                report += f"üì¶ *{cat}*\n" + "\n".join(f"- {i}" for i in items) + "\n\n"
        total_acts = sum(activity.values()) or 1
        report += "üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–≤:\n"
        for user, count in activity.items():
            percent = round(count / total_acts * 100, 1)
            report += f"‚Äì @{user}: {percent}%\n"
        for uname in SELLERS:
            try:
                bot.send_message(f"@{uname}", report, parse_mode="Markdown")
            except Exception:
                pass
        print("‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü–∞–º.")

# === –ï–ñ–ï–î–ù–ï–í–ù–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï ===
def daily_reminder():
    for uname in SELLERS:
        try:
            bot.send_message(f"@{uname}", "üìã –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–æ–±–∞–≤—å—Ç–µ —Å–µ–≥–æ–¥–Ω—è —Ö–æ—Ç—è –±—ã 3 –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
        except Exception:
            pass
    print("üîî –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")

# === –ü–õ–ê–ù–ò–†–û–í–©–ò–ö ===
scheduler = BackgroundScheduler(timezone=TIMEZONE)
scheduler.add_job(daily_reminder, 'cron', hour=10)  # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
scheduler.add_job(weekly_report, 'cron', day_of_week='tue', hour=21)
scheduler.start()

print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7...")
bot.infinity_polling()
